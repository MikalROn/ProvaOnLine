% Arquivo de Importação para Orientação a Objetos
% ------------------------------------------------------------------------
% Exemplo de Questão Objetiva:
%   Campos: O«Código«Questao«RespA«RespB«RespC«RespD«Certa«Area«Semestre
%   O«C01Q01«Isto é teste«Sim«Não«Talvez«Depende«A«Conhecimentos Gerais«1
% Exemplo de Questão Subjetiva:
%   Campos: S«Código«Questao«Resp«Area«Semestre
%   S«C01Q01«Isto é teste«Sim«Conhecimentos Gerais«1
% Use: %SL% para saltar de linha nas perguntas. %TB% para tabulação
% Áreas das Questões: Conceitos;SOLID;UML;Princípios;Prática
% ------------------------------------------------------------------------
O«C01Q01«A Orientação a objetos:«É uma forma de programação e só pode ser aplicada a determinadas linguagens que suportem seus conceitos.«É um paradigma de programação e pode ser aplicado independente de linguagem.«Não existe tal coisa, o que existe é programação orientada a eventos.«Isso não existe em programação«B«Conceitos«1
O«C02Q01«É(são) verdade(s) sobre a POO:«Para um iniciante entender seus conceitos torna a criação de uma aplicação mais complexa do que o desenvolvimento tradicional.«Mesmo dominado seus conceitos, a programação é bem mais complexa  do que o desenvolvimento tradicional.«A maior vantagem é que ao possuir uma taxa de Reaproveitamento alta, isso simplifica a gestão de aplicações.«É com base em Princípios.«E«Conceitos«1
O«C03Q01«É(são) verdade(s) sobre Reaproveitamento:«Reaproveitar é copiar o código de uma aplicação para outra.«Reaproveitar é, obrigatoriamente, criar uma biblioteca de códigos comuns que serão utilizados por todas as aplicações.«Reaproveitar é compartilhar o mesmo código criado por uma aplicação em outra através de uma hierarquia de classes.«Reaproveitar significa olhar para um código pronto e criar uma versão melhor«C«Conceitos«1
O«C04Q01«Qual das seguintes alternativas é a definição mais precisa de um objeto em programação orientada a objetos?«Uma estrutura de dados que armazena informações.«Uma designação para qualquer tipo de dado ou variável.«Uma instância de uma classe que contém atributos e métodos.«Uma função que realiza uma operação especificada.«C«Conceitos«1
O«C05Q01«Uma classe em programação orientada a objetos é melhor descrita como:«Uma coleção de objetos com propriedades e comportamentos similares.«Um modelo ou blueprint a partir do qual os objetos são criados.«Uma função específica dentro de um programa de computador.«Uma variável que armazena múltiplos valores do mesmo tipo.«B«Conceitos«1
O«C06Q01«Qual das seguintes afirmativas sobre classes abstratas é verdadeira?«Classes abstratas não podem ser instanciadas e são completas por si só.«Classes abstratas são modelos exatos e podem ser diretamente instanciadas.«Classes abstratas não podem ser instanciadas e assim não podem gerar um objeto.«Classes abstratas não contêm métodos e existem apenas para economizar espaço.«C«Conceitos«1
O«C07Q01«Qual é a diferença entre programação orientada a objetos (POO) e programação procedural?«POO não permite o uso de laços e condicionais.«Programação procedural organiza o código em objetos e classes.«POO envolve a criação de entidades autocontidas, ao passo que a programação procedural se foca em funções e rotinas sequenciais.«Programação procedural permite herança e polimorfismo, enquanto POO não.«C«Conceitos«1
O«C02Q01«Qual o princípio do SOLID que estabelece que uma classe deve ter apenas uma razão para mudar?«Princípio da Segregação de Interface«Princípio da Responsabilidade Única«Princípio da Inversão de Dependência«Princípio da Substituição de Liskov«B«SOLID«1
O«C02Q02«O Princípio Aberto/Fechado afirma que as entidades de software devem ser:«Abertas para modificação e fechadas para extensão«Fechadas para modificação e abertas para extensão«Abertas tanto para modificação quanto para extensão«Fechadas tanto para modificação quanto para extensão«B«SOLID«1
O«C02Q03«O Princípio de Substituição de Liskov afirma que:«Uma classe abstrata deve ser substituível por sua classe concreta«Métodos que usam ponteiros ou referências a classes base devem ser capazes de usar objetos de uma classe derivada sem saber disso«Uma classe base deve ser substituível por sua classe derivada«Não existe tal princípio em SOLID«B«SOLID«1
O«C02Q04«Qual dos seguintes princípios do SOLID aponta para a necessidade de dividir as interfaces em interfaces menores e mais específicas?«Princípio da Responsabilidade Única«Princípio da Inversão de Dependência«Princípio da Segregação de Interface«Princípio Aberto/Fechado«C«SOLID«1
O«C02Q05«O Princípio da Inversão de Dependência no SOLID instrui que:«Módulos de alto nível podem depender diretamente de módulos de baixo nível«Módulos de baixo nível devem depender de módulos de alto nível«Módulos de alto nível não devem depender de módulos de baixo nível, mas ambos devem depender de abstrações«Abstrações devem depender de detalhes«C«SOLID«1
O«C03Q01«Qual diagrama UML é utilizado para representar a estrutura estática de um sistema, mostrando classes, atributos, métodos e as relações entre eles?«Diagrama de Casos de Uso«Diagrama de Sequência«Diagrama de Classes«Diagrama de Atividades«C«UML«1
O«C03Q02«Em um Diagrama de Sequência UML, o que é geralmente representado?«As interações entre objetos em uma ordem cronológica específica.«A troca de mensagens em uma rede.«As funcionalidades do sistema sob a perspectiva dos usuários.«Os diferentes estados possíveis de um objeto.«A«UML«1
O«C03Q03«No contexto da UML, o que um Diagrama de Estados descreve?«A sequência de atividades em um processo.«A organização interna de um componente.«A distribuição física dos componentes de software.«Os diferentes estados possíveis de um objeto e as transições entre eles.«D«UML«1
O«C03Q04«Qual diagrama usamos para visualizar a distribuição física dos artefatos de software em nós de hardware?«Diagrama de Componentes«Diagrama de Implantação«Diagrama de Comunicação«Diagrama de Estrutura Composta«B«UML«1
O«C03Q05«Se necessitamos mostrar como um objeto muda de estado ao longo do tempo, qual tipo de diagrama UML seria o mais adequado?«Diagrama de Atividades«Diagrama de Tempo«Diagrama de Sequência«Diagrama de Visão Geral de Interação«B«UML«1
O«C04Q01«Para que existe o princípio do Encapsulamento?«Definir a composição das interfaces e classes abstratas ou concretas.«Definir como devem ser construídos métodos e atributos dentro de uma classe concreta.«Definir como deve ser o relacionamento das classes.«Não existe tal princípio na OO«B«Princípios«1
O«C04Q02«Os métodos que permitem o encapsulamento de um atributo são (por padrão) denominados:«GET e SET«ADD e ENV«CREATE e UPDATE«THIS e SUPER«A«Princípios«1
O«C04Q03«É(são) verdade(s) sobre Métodos construtores:«Possuem OBRIGATORIAMENTE o mesmo nome da classe.«Não possui um tipo de retorno, nem mesmo void.«Pode ou não ter parâmetros que correspondem aos valores iniciais dos atributos da classe.«Existem em cada classe, mesmo que não seja codificado«E«Princípios«1
O«C04Q04«Uma das funções do Princípio do Encapsulamento:«Esconder os detalhes de implementação dos objetos, tornando possível controlar modificações ou acesso no atributo.«Esconder os detalhes de implementação dos objetos, tornando mais complicado alterar a forma destes.«Permite que os objetos possam ser utilizados de forma menos segura em ambientes distribuídos.«Garante que as operações que acessam seus dados sejam executadas de forma não atômica.«A«Princípios«1
O«C04Q05«Encapsular se baseia na ideia de:«Proteger«Esconder«Garantir«Relacionar«A«Princípios«1
O«C05Q01«Para que existe o princípio da Herança?«Definir a composição das interfaces e classes abstratas ou concretas.«Definir como devem ser construídos métodos e atributos dentro de uma classe concreta.«Definir como deve ser o relacionamento das classes.«Definir a quantidade de Classes e Objetos que é possível existir em um sistema«C«Princípios«1
O«C05Q02«Qual a utilização da palavra-chave "super" em linguagem Java:«Se referir a própria classe.«Se referir a classe pai.«Se referir a interface.« Se referir a uma subclasse.«B«Princípios«1
O«C05Q03«Qual a utilização da palavra-chave "this" em linguagem Java:«Se referir a própria classe.«Se referir a classe pai.«Se referir a interface.« Se referir a uma subclasse.«A«Princípios«1
O«C05Q04«Se herdamos uma classe o que acontece com o método construtor:«NÃO é herdado.«É herdado e deve ser utilizado obrigatoriamente.«Pode ou não ser herdado dependendo se o modificarmos.«É herdado e a partir de agora devemos usá-lo obrigatoriamente«A«Princípios«1
O«C05Q05«Se herdamos uma classe abstrata em uma classe concreta, é verdade que:«TODOS os métodos abstratos devem ser implementados.«ALGUNS métodos abstratos devem ser implementos.«Podemos modificar os métodos finais.«Seus métodos particulares não são herdados.«A«Princípios«1
O«C05Q06«NÃO é um princípio da Orientação a Objetos:«Herança«Abstração«Encapsulamento«Inativação«D«Princípios«1
S«C06Q01«Complete o seguinte código (em linguagem Java) de modo a criar corretamente a classe Cachorro que implementa um Pet? %SL% %SL% public class Cachorro ________ Pet { }«implements«Prática«1
S«C06Q02«Complete o seguinte código (em linguagem Java) de modo a criar corretamente a classe Cachorro que extende um Pet? %SL% %SL% public class Cachorro ________ Pet { }«extends«Prática«1
S«C06Q03«Complete o seguinte código (em linguagem Java) de modo a criar corretamente o método construtor de uma classe chamada Teste? %SL% %SL% public ______() { }«Teste«Prática«1
S«C06Q04«Complete o seguinte método (em linguagem Java) de modo a respeitar o princípio do Encapsulamento para um atributo chamado guitarra do tipo Guitarra? %SL% %SL% public Guitarra  ______() { %SL% %TB% return comodo; %SL% }«getGuitarra«Prática«1
S«C06Q05«Complete o seguinte método (em linguagem Java) de modo a respeitar o princípio do Encapsulamento para um atributo chamado guitarra do tipo Guitarra? %SL% %SL% public void  ______(Guitarra guitarra) { %SL% %TB% this.guitarra = guitarra; %SL% }«setGuitarra«Prática«1
